# SPDX-FileCopyrightText: © 2022 Tim Weber
# SPDX-FileCopyrightText: © 2023 Jörn Bethune
# SPDX-FileCopyrightText: © 2023 iameru
#
# SPDX-License-Identifier: AGPL-3.0-or-later

[tool.poetry]
name = "DearMEP"
version = "4.0.0-dev.9999999999"
description = "DearMEP helps people contact their representatives."
authors = ["Tim Weber"]
license = "AGPL-3.0"
# Include the frontend, see <https://github.com/python-poetry/poetry/issues/2809>
include = ["dearmep/static_files/static/**/*"]

[tool.poetry.scripts]
dearmep = "dearmep.cli:run"

[tool.poetry.dependencies]
python = "^3.8"
fastapi = "^0.95.1"
PyYAML = "^6.0"
limits = "^3.3.1"
lzip = "^1.2.0"
rich = "^13.4.2"
countryguess = "^0.3.0"
defusedxml = "^0.7.1"
httpx = ">=0.23"
uvicorn = {extras = ["standard"], version = "^0.21.1"}
python-geoacumen = ">=2023"
starlette-exporter = "^0.15.1"
sqlmodel = "^0.0.8"
eralchemy2 = {version = "^1.3.7", optional = true}
csvkit = {version = "*", optional = true}
visidata = {version = "*", optional = true}
pillow = "^9.5"
requests = "^2.31"
backoff = "^2.2.1"
ratelimit = "^2.2.1"
python-dotenv = "^1.0.0"
jinja2 = "^3.1.2"
markdown-it-py = "^2.2"
python-multipart = "^0.0.7"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
types-python-jose = "^3.3.4.8"
xlsxwriter = {version = "^3.1.5", optional = true}
canonicaljson = "^2.0.0"
phonenumbers = "^8.13.22"
pytz = "^2023.3.post1"
alembic = "^1.12.1"
fastapi-restful = "^0.5.0"
pydantic = ">=1.10.16,<2"

[tool.poetry.group.dev.dependencies]
mypy = "<1.0"
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
py-mmdb-encoder = "^1.0.4"
types-PyYAML = "^6.0.11"
httpx = "^0.23.1"
types-attrs = "^19.1.0"
types-maxminddb = "^1.5.0"
types-pillow = "^9.5"
types-requests = "^2.31"
types-pytz = "^2023.3.1.1"
ruff = "^0.8.2"

[tool.poetry.extras]
convert = ["csvkit", "visidata", "xlsxwriter"]
specs = ["eralchemy2"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
packages = "dearmep"
python_version = "3.8"
warn_return_any = true

[tool.pytest.ini_options]
addopts = "--strict-markers --junit-xml=report.xml --cov-report=term --cov-report=xml --cov=dearmep"
markers = [
	"config_path: set a custom config YAML file name",
	"config_content: set custom config YAML data",
]

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py38"  # when changing this, check below whether some rules can be re-enabled
exclude = [
	".git",
	"migrations",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
preview = true
select = [
	"ANN",     # flake8-annotations
	"ARG",     # flake8-unused-arguments
	"ASYNC",   # flake8-async
	"B",       # flake8-bugbear
	"C4",      # flake8-comprehensions
	"C90",     # mccabe complexity
	"DTZ",     # flake8-datetimez (naive datetimes)
	"E",       # pycodestyle errors
	"ERA",     # eradicate (commented-out code)
	"EXE",     # flake8-executable (shebang lines)
	"F",       # pyflakes
	"FA",      # flake8-future-annotations
	"FURB",    # refurb
	"I",       # isort
	"INP",     # flake8-no-pep420 (implicit namespace package)
	"ISC",     # flake8-implicit-str-concat
	"LOG",     # flake8-logging
	"N",       # pep8-naming
	"PL",      # pylint
	"PT",      # flake8-pytest-style
	"PTH",     # flake8-use-pathlib
	"Q",       # flake8-quotes
	"RET",     # flake8-return
	"RSE",     # flake8-raise
	"RUF",     # Ruff-specific rules
	"S",       # flake8-bandit (security)
	"SIM",     # flake8-simplify
	"SLF",     # flake8-self (private member access)
	"SLOT",    # flake8-slots
	"TCH",     # flake8-type-checking
	"TRY",     # tryceratops
	"T20",     # flake8-print
	"UP",      # pyupgrade
	"W",       # pycodestyle warnings
]
ignore = [
	"ISC001",   # conflict w/ formatter, see https://github.com/astral-sh/ruff/issues/8272
	"PLC0415",  # forbids dynamic imports
	"PT006",    # forbids comma-separated string for @pytest.mark.parametrize names
	"PT007",    # forbids non-list types for @pytest.mark.parametrize values
	"RUF001",   # complains about Unicode typography in strings
	"RUF002",   # complains about Unicode typography in docstrings
	"RUF200",   # requires a name for projects
	"TRY003",   # complains about simple ValueError messages
	# to be re-enabled when minimum Python version is >= 3.9
	"UP006",    # suggests stdlib generic collection annotations (list[...]), which can confuse Python < 3.9
	# to be re-enabled when minimum Python version is >= 3.10
	"FA100",    # suggests `from __future__ import annotations`, which causes trouble in SQLModel <https://github.com/tiangolo/sqlmodel/issues/196>
	"UP007",    # suggests X | Y annotations, which can confuse Python < 3.10
]

[tool.ruff.lint.flake8-bugbear]
# Allow FastAPI's request data type hints as default arguments in functions.
extend-immutable-calls = ["fastapi.Form", "fastapi.Query"]

[tool.ruff.lint.isort]
# Two blank lines after the imports.
lines-after-imports = 2

[tool.ruff.lint.pep8-naming]
# Tell Ruff that Pydantic's @validator decorator expects a class method.
# See <https://github.com/astral-sh/ruff/issues/2151>.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
	"ANN001",  # missing function argument annotation
	"ANN201",  # missing return type annotation
	"ARG001",  # unused function argument (e.g. require-only fixtures)
	"INP001",  # implicit namespace package
	"S101",    # use of assert
]
